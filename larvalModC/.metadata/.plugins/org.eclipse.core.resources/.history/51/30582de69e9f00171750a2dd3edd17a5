// mosquito population model
#include <iostream>
#include <vector>
#include <random>
using namespace std;
std::random_device rd; //Will be used to obtain a seed for the random number engine
std::uniform_real_distribution<> dis(0, 1);
std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()


//bernouli trial function
double bernTrial(int n, float p) {
	float res = 0;
	int t =1;
	while (t<n){
	if (dis(gen)<p) res++;
	t++;
	}
	return res;
}



//mosquito population model function

std::vector<int> mPmod(float dE, float dL, float dP,float uoE, float uoL, float uP, float uM, float Y, float S,
		float tr, float sf, float dt, float n, float Emax, float E0, float L0, float P0, float M0,
		float time) {
	int t =0;
int Be =0;
int Bl =0;
int Bp =0;
int Bm =0;
int nt =0;
float E = E0;
float L = L0;
int K = 100;
float uE;
float uL;
std::vector<int> r;

while (t < time) {

uE = uoE*dt*(1+((E+L)/(K)));
uL = uoL*dt*(1+(Y*(E+L)/(K)));

if ((dE+uE)*dt<1) Be = 1; else Be = 10;

		uoE = uoE + (uoE * uoL);
		t++;
		r.push_back(uoE);

	}

	return r;

}

int main ()
{


 // std::vector<int> z;
 // z =  mod(10,0.2,50);

  //for (std::vector<int>::const_iterator i = z.begin(); i != z.end(); ++i)
    //  std::cout << *i << ' ';

}
